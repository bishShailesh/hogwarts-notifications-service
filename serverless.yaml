service: hogwarts-notifications-service

frameworkVersion: '4.21.0'

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    NOTIFICATION_DYNAMODB_TABLE: hogwarts-notifications-${self:provider.stage}
    NOTIFICATION_QUEUE_URL: ${self:custom.queueUrl.${self:provider.stage}}
    NOTIFICATION_TOPIC_ARN: ${self:custom.snsTopicArn.${self:provider.stage}}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, 'info'}
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}

functions:
  authorizer:
    handler: dist/src/lambda/authorizer.handler

  createNotification:
    handler: dist/src/lambda/create-notification.handler
    events:
      - http:
          path: /notifications
          method: post
          authorizer:
            type: request
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/hogwarts-notifications-${self:provider.stage}
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - Fn::GetAtt:
              - NotificationQueue
              - Arn

  listNotifications:
    handler: dist/src/lambda/list-notifications.handler
    events:
      - http:
          path: /notifications
          method: get
          authorizer:
            type: request
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/hogwarts-notifications-${self:provider.stage}

  getNotification:
    handler: dist/src/lambda/get-notification.handler
    events:
      - http:
          path: /notifications/{id}
          method: get
          authorizer:
            type: request
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/hogwarts-notifications-${self:provider.stage}

  deliverNotification:
    handler: dist/src/lambda/deliver-notification.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - NotificationQueue
              - Arn
          batchSize: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/hogwarts-notifications-${self:provider.stage}
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - Fn::GetAtt:
              - NotificationTopic
              - Arn

resources:
  Resources:
    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: hogwarts-notifications-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    NotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: hogwarts-notification-queue-${self:provider.stage}

    NotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: hogwarts-notifications-topic-${self:provider.stage}

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CustomJWTAuthorizer-${self:provider.stage}
        Type: REQUEST
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizerUri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt:
                  - AuthorizerLambdaFunction
                  - Arn
              - '/invocations'
        IdentitySource: method.request.header.Authorization

custom:
  queueUrl:
    offline: http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/hogwarts-notification-queue-offline
    dev:
      Fn::Join:
        - ''
        - - 'https://sqs.'
          - ${self:provider.region}
          - '.amazonaws.com/${aws:accountId}/hogwarts-notification-queue-dev'
    qa:
      Fn::Join:
        - ''
        - - 'https://sqs.'
          - ${self:provider.region}
          - '.amazonaws.com/${aws:accountId}/hogwarts-notification-queue-qa'
    cat:
      Fn::Join:
        - ''
        - - 'https://sqs.'
          - ${self:provider.region}
          - '.amazonaws.com/${aws:accountId}/hogwarts-notification-queue-cat'
    prod:
      Fn::Join:
        - ''
        - - 'https://sqs.'
          - ${self:provider.region}
          - '.amazonaws.com/${aws:accountId}/hogwarts-notification-queue-prod'

  snsTopicArn:
    offline: arn:aws:sns:us-east-1:000000000000:hogwarts-notifications-topic-offline
    dev:
      Fn::Join:
        - ''
        - - 'arn:aws:sns:'
          - ${self:provider.region}
          - ':${aws:accountId}:hogwarts-notifications-topic-dev'
    qa:
      Fn::Join:
        - ''
        - - 'arn:aws:sns:'
          - ${self:provider.region}
          - ':${aws:accountId}:hogwarts-notifications-topic-qa'
    cat:
      Fn::Join:
        - ''
        - - 'arn:aws:sns:'
          - ${self:provider.region}
          - ':${aws:accountId}:hogwarts-notifications-topic-cat'
    prod:
      Fn::Join:
        - ''
        - - 'arn:aws:sns:'
          - ${self:provider.region}
          - ':${aws:accountId}:hogwarts-notifications-topic-prod'

  logLevel:
    offline: debug
    dev: info
    qa: warn
    cat: error
    prod: error
